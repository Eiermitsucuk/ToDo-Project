document.addEventListener("DOMContentLoaded", () => {    const renderButton = document.getElementById("renderWithJS");    if (renderButton) {        renderButton.addEventListener("click", () => {            const todosData = document.getElementById("todos-data").dataset.todos;            const todos = JSON.parse(todosData || "{}");            if (todos) {                renderToDos(todos);            } else {                console.error("No ToDo data found!");            }        });    }    function renderToDos(data) {        const statusToDos = {            to_do: document.getElementById("to_do_list"),            in_progress: document.getElementById("in_progress_list"),            done: document.getElementById("done_list"),        };        Object.values(statusToDos).forEach((container) => {            while (container.firstChild) {                container.removeChild(container.firstChild);            }        });        Object.keys(data).forEach((status) => {            const todos = data[status];            const container = statusToDos[status];            if (container && Array.isArray(todos)) {                todos.forEach((todo) => {                    const card = createToDoCard(todo, status);                    container.appendChild(card);                });            }        });    }    function createToDoCard(todo, status) {        const card = document.createElement("div");        const title = document.createElement("h5");        const cardBody = document.createElement("div");        const description = document.createElement("h5");        const descriptionLabel = document.createElement("strong");        const descriptionText = document.createTextNode(todo.description || "");        const deadline = document.createElement("p");        const deadlineLabel = document.createElement("strong");        const deadlineText = document.createTextNode(todo.deadline || "");        const showButton = document.createElement("a");        card.classList.add("card", "mb-3", "to-do-item");        card.setAttribute("data-id", todo.id);        cardBody.classList.add("card-body");        title.textContent = todo.title;        descriptionLabel.textContent = "Description: ";        description.appendChild(descriptionLabel);        description.appendChild(descriptionText);        deadlineLabel.textContent = "Deadline: ";        deadline.appendChild(deadlineLabel);        deadline.appendChild(deadlineText);        showButton.href = "#";        showButton.classList.add("btn", `btn-outline-${getButtonClass(status)}`, "btn-sm", "mt-2");        showButton.textContent = "Show this to do";        showButton.addEventListener("click", (event) => {            event.preventDefault();            modalShowMenu(todo.id);        });        cardBody.appendChild(title);        cardBody.appendChild(description);        cardBody.appendChild(deadline);        cardBody.appendChild(showButton);        card.appendChild(cardBody);        return card;    }    function modalShowMenu(todoId) {        fetch(`/to_dos/${todoId}.json`)            .then((response) => response.json())            .then((todo) => {                let modal = document.getElementById("todoModal");                if (!modal) {                    modal = document.createElement("dialog");                    modal.id = "todoModal";                    modal.style.width = "60%";                    modal.style.border = "none";                    modal.style.borderRadius = "8px";                    modal.style.padding = "0px";                    modal.style.zIndex = "1400";                    modal.style.background = "none";                    document.body.appendChild(modal);                    modal.addEventListener("click", (event) => {                        if (event.target === modal) {                            modal.close();                        }                    });                }                while (modal.firstChild) {                    modal.removeChild(modal.firstChild);                }                let overlay = document.getElementById("overlay");                if (!overlay) {                    overlay = document.createElement("div");                    overlay.id = "overlay";                    overlay.style.width = "100%";                    overlay.style.borderRadius = "8px";                    overlay.style.padding = "20px";                    overlay.style.backgroundColor = "white";                    overlay.style.boxShadow = "0px 4px 6px rgba(0, 0, 0, 0.1)";                    overlay.style.margin = "auto";                    overlay.style.position = "relative";                    overlay.style.zIndex = "1400";                    overlay.addEventListener("click", (event) => {                        event.stopPropagation();                    });                }                const card = document.createElement("div");                const header = document.createElement("div");                const body = document.createElement("div");                const title = document.createElement("h4");                const description = document.createElement("p");                const descriptionLabel = document.createElement("strong");                const status = document.createElement("p");                const statusLabel = document.createElement("strong");                const creator = document.createElement("p");                const creatorLabel = document.createElement("strong");                const assignee = document.createElement("p");                const assigneeLabel = document.createElement("strong");                const footer = document.createElement("div");                const  editLink = document.createElement("a");                const deleteForm = document.createElement("form");                const methodInput = document.createElement("input");                const deleteButton = document.createElement("button");                deleteButton.addEventListener("click", function (e) {                    e.preventDefault();                    deleteToDo(todo.id)                })                card.classList.add("card", "dynamic-content");                header.classList.add("card-header", "bg-info", "text-white");                header.textContent = "To Do Details";                body.classList.add("card-body");                title.classList.add("card-title");                title.textContent = todo.title;                description.classList.add("card-text");                descriptionLabel.textContent = "Description: ";                description.appendChild(descriptionLabel);                description.appendChild(document.createTextNode(todo.description || "No description"));                status.classList.add("card-text");                statusLabel.textContent = "Status: ";                status.appendChild(statusLabel);                status.appendChild(document.createTextNode(todo.status || "Unknown"));                creator.classList.add("card-text");                creatorLabel.textContent = "Created by: ";                creator.appendChild(creatorLabel);                creator.appendChild(document.createTextNode(todo.creator?.email || "Unknown"));                assignee.classList.add("card-text");                assigneeLabel.textContent = "Assigned to: ";                assignee.appendChild(assigneeLabel);                assignee.appendChild(document.createTextNode(todo.assignee?.email || "Not Assigned"));                body.appendChild(title);                body.appendChild(description);                body.appendChild(status);                body.appendChild(creator);                body.appendChild(assignee);                footer.classList.add("card-footer", "text-center");                editLink.href = `/to_dos/${todo.id}/edit`;                editLink.classList.add("btn", "btn-warning", "me-2");                editLink.textContent = "Edit";                methodInput.type = "hidden";                methodInput.name = "_method";                methodInput.value = "delete";                deleteButton.classList.add("btn", "btn-danger");                deleteButton.textContent = "Delete";                deleteForm.appendChild(deleteButton);                editLink.textContent = "Edit";                editLink.classList.add("btn", "btn-warning", "me-2");                editLink.addEventListener('click', (e) => {                    e.preventDefault();                    editModalMenu(todo);                });                footer.appendChild(editLink);                footer.appendChild(deleteForm);                card.appendChild(header);                card.appendChild(body);                card.appendChild(footer);                overlay.appendChild(card);                modal.appendChild(overlay);                modal.showModal();                document.addEventListener("click", (event) => {                    if (event.target.tagName === "button" && event.target.classList.contains("delete-button")) {                        const todoId = event.target.dataset.id;                        deleteToDo(todoId);                    }                })            })            .catch((error) => {                console.error(error);            });    }    function getButtonClass(status) {        switch (status) {            case 'to_do':                return 'primary';            case 'in_progress':                return 'warning';            case 'done':                return 'success';            default:                return 'secondary';        }    }    function deleteToDo(todoId) {        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');        fetch(`/to_dos/${todoId}`, {            method: "DELETE",            headers: {                'Content-Type': 'application/json',                'X-CSRF-Token': csrfToken            }        }).then(response => {            if (response.status !== 204) {                throw new Error(`HTTP error! status: ${response.status}`);            }            const modal = document.querySelector('#todoModal');            if (modal && typeof modal.close === "function") {                modal.close();            }            const todoElement = document.querySelector(`[data-id="${todoId}"]`);            if (todoElement) {                todoElement.remove();            }        }).catch(error => {            console.error('Error fetching or parsing JSON:', error);            if (error.message) {                console.error('Error message:', error.message);            }            if (error instanceof TypeError) {                console.error('Error: Invalid Response Type or Data Format');            }            alert('An error occurred while fetching data. Please try again later.');        });    }    function editModalMenu(todo) {        fetch(`/to_dos/${todo.id}/edit`, {            headers: {                'Accept': 'text/html'            }        })            .then(response => response.text())            .then(html => {                const parser = new DOMParser();                const doc = parser.parseFromString(html, 'text/html');                const form = doc.querySelector('form');                let modal = document.getElementById("editTodoModal");                if (!modal) {                    modal = document.createElement("dialog");                    modal.id = "editTodoModal";                    modal.style.cssText = "width: 60%; border: none; border-radius: 8px; padding: 0; z-index: 1400; background: none;";                    document.body.appendChild(modal);                }                modal.innerHTML = '';                const overlay = document.createElement("div");                overlay.style.cssText = "width: 100%; border-radius: 8px; padding: 20px; background: white; box-shadow: 0 4px 6px rgba(0,0,0,0.1); margin: auto; position: relative; z-index: 1400;";                overlay.appendChild(form.cloneNode(true));                const closeButton = document.createElement("button");                closeButton.textContent = "×";                closeButton.style.cssText = "position: absolute; top: 10px; right: 10px; background: none; border: none; font-size: 1.5rem;";                closeButton.addEventListener("click", () => modal.close());                overlay.prepend(closeButton);                const formElement = overlay.querySelector('form');                formElement.addEventListener('submit', function(e) {                    e.preventDefault();                    submitEditForm(formElement, todo.id, modal);                });                modal.appendChild(overlay);                modal.showModal();            })            .catch(error => console.error(error));    }    function submitEditForm(form, todoId, modal) {        const formData = new FormData(form);        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;        fetch(`/to_dos/${todoId}`, {            method: "PATCH",            body: formData,            headers: {                'X-CSRF-Token': csrfToken,                'Accept': 'application/json'            }        })            .then(response => {                if (!response.ok && response.status !== 204) {                    throw new Error(`HTTP error! status: ${response.status}`);                }                if (response.status === 204) {                    return fetch(`/to_dos/${todoId}.json`).then(resp => {                        if (!resp.ok) {                            throw new Error(`HTTP error fetching updated todo: ${resp.status}`);                        }                        return resp.json();                    });                } else {                    return response.json();                }            })            .then(updatedTodo => {                modal.close();                refreshToDos();                const detailsModal = document.getElementById("todoModal");                if (detailsModal && detailsModal.open) {                    modalShowMenu(updatedTodo.id);                }            })            .catch(error => {                console.error('Error updating todo:', error);                alert('Error updating todo');            });    }    function refreshToDos() {        fetch('/to_dos.json')            .then(response => {                if (!response.ok) {                    throw new Error(`HTTP error fetching todos: ${response.status}`);                }                return response.json();            })            .then(data => {                renderToDos(data);            })            .catch(error => {                console.error('Error refreshing todos:', error);            });    }});