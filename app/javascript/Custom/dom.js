document.addEventListener("DOMContentLoaded", () => {    const renderButton = document.getElementById("renderWithJS");    if (renderButton) {        renderButton.addEventListener("click", () => {            const todosData = document.getElementById("todos-data").dataset.todos;            const todos = JSON.parse(todosData || "{}");            if (todos) {                renderToDos(todos);            } else {                console.error("No ToDo data found!");            }        });    }    function renderToDos(data) {        const statusToDos = {            to_do: document.getElementById("to_do_list"),            in_progress: document.getElementById("in_progress_list"),            done: document.getElementById("done_list"),        };        Object.values(statusToDos).forEach((container) => {            while (container.firstChild) {                container.removeChild(container.firstChild);            }        });        Object.keys(data).forEach((status) => {            const todos = data[status];            const container = statusToDos[status];            if (container && Array.isArray(todos)) {                todos.forEach((todo) => {                    const card = createToDoCard(todo, status);                    container.appendChild(card);                });            }        });        const createToDoLink = document.getElementById("create-to-do");        if (createToDoLink) {            createToDoLink.addEventListener("click", function (event) {                event.preventDefault();                createToDoForm();            });        }    }    function createToDoCard(todo, status) {        const card = document.createElement("div");        const title = document.createElement("h5");        const cardBody = document.createElement("div");        const description = document.createElement("h5");        const descriptionLabel = document.createElement("strong");        const descriptionText = document.createTextNode(todo.description || "");        const deadline = document.createElement("p");        const deadlineLabel = document.createElement("strong");        const deadlineText = document.createTextNode(todo.deadline || "");        const showButton = document.createElement("a");        card.classList.add("card", "mb-3", "to-do-item");        card.setAttribute("data-id", todo.id);        cardBody.classList.add("card-body");        title.textContent = todo.title;        descriptionLabel.textContent = "Description: ";        description.appendChild(descriptionLabel);        description.appendChild(descriptionText);        deadlineLabel.textContent = "Deadline: ";        deadline.appendChild(deadlineLabel);        deadline.appendChild(deadlineText);        showButton.href = "#";        showButton.classList.add("btn", `btn-outline-${getButtonClass(status)}`, "btn-sm", "mt-2");        showButton.textContent = "Show this to do";        showButton.addEventListener("click", (event) => {            event.preventDefault();            modalShowMenu(todo.id);        });        cardBody.appendChild(title);        cardBody.appendChild(description);        cardBody.appendChild(deadline);        cardBody.appendChild(showButton);        card.appendChild(cardBody);        return card;    }    function createModal(id) {        let modal = document.getElementById(id);        if (!modal) {            modal = document.createElement("dialog");            modal.id = id;            modal.style.cssText = "width: 60%; border: none; border-radius: 8px; padding: 0; z-index: 1400; background: none;";            document.body.appendChild(modal);            modal.addEventListener("click", (event) => {                if (event.target === modal) {                    modal.close();                }            });        }        while (modal.firstChild) {            modal.removeChild(modal.firstChild);        }        const overlay = document.createElement("div");        overlay.style.cssText = "width: 100%; border-radius: 8px; padding: 20px; background-color: white; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); margin: auto; position: relative; z-index: 1400;";        overlay.addEventListener("click", (event) => event.stopPropagation());        modal.appendChild(overlay);        return { modal, overlay };    }    function modalShowMenu(todoId) {        fetch(`/to_dos/${todoId}.json`)            .then((response) => response.json())            .then((todo) => {                const { modal, overlay } = createModal("todoModal");                const card = document.createElement("div");                card.classList.add("card", "dynamic-content");                const header = document.createElement("div");                header.classList.add("card-header", "bg-info", "text-white");                header.textContent = "To Do Details";                const body = document.createElement("div");                body.classList.add("card-body");                const elements = {                    title: { label: "", value: todo.title },                    description: { label: "Description: ", value: todo.description || "" },                    status: { label: "Status: ", value: todo.status || "" },                    creator: { label: "Created by: ", value: todo.creator?.email || "",                        email: ""                    },                    assignee: { label: "Assigned to: ", value: todo.assignee?.email || "" }                };                Object.entries(elements).forEach(([key, { label, value }]) => {                    const element = key === 'title'                        ? createElement('h4', value, ['card-title'])                        : createTextElement('p', label, value, ['card-text']);                    body.appendChild(element);                });                const footer = document.createElement("div");                footer.classList.add("card-footer", "text-center");                const editLink = document.createElement("a");                editLink.textContent = "Edit";                editLink.classList.add("btn", "btn-warning", "me-2");                editLink.addEventListener('click', (e) => {                    e.preventDefault();                    modal.close();                    editToDoForm(todo);                });                const deleteForm = document.createElement("form");                const deleteButton = document.createElement("button");                deleteButton.classList.add("btn", "btn-danger");                deleteButton.textContent = "Delete";                deleteButton.addEventListener("click", (e) => {                    e.preventDefault();                    deleteToDo(todo.id);                });                deleteForm.appendChild(deleteButton);                footer.appendChild(editLink);                footer.appendChild(deleteForm);                card.appendChild(header);                card.appendChild(body);                card.appendChild(footer);                overlay.appendChild(card);                modal.showModal();            })            .catch((error) => {                console.error(error);            });    }    function createToDoForm(todo = null) {        const isEdit = !!todo;        const { modal, overlay } = createModal(isEdit ? "editTodoModal" : "todoCreateModal");        const form = document.createElement("form");        const header = document.createElement("div");        const body = document.createElement("div");        const titleGroup = document.createElement("div");        const titleLabel = document.createElement("label");        const titleInput = document.createElement("input");        const descGroup = document.createElement("div");        const descLabel = document.createElement("label");        const descInput = document.createElement("textarea");        const statusGroup = document.createElement("div");        const statusLabel = document.createElement("label");        const statusSelect = document.createElement("select");        const statuses = ["to_do", "in_progress", "done"];        const assigneeGroup = document.createElement("div");        const assigneeLabel = document.createElement("label");        const assigneeSelect = document.createElement("select");        form.id = isEdit ? "todoEditForm" : "createToDoForm";        form.classList.add(isEdit ? "edit-form" : "create-form");        header.classList.add("card-header", "bg-info", "text-white");        header.textContent = isEdit ? "Edit To Do" : "Create New To Do";        body.classList.add("card-body");        titleGroup.classList.add("mb-3");        titleLabel.classList.add("form-label");        titleLabel.textContent = "Title";        titleInput.type = "text";        titleInput.classList.add("form-control");        titleInput.name = "title";        titleInput.value = todo?.title || "";        titleInput.required = true;        titleGroup.appendChild(titleLabel);        titleGroup.appendChild(titleInput);        descGroup.classList.add("mb-3");        descLabel.classList.add("form-label");        descLabel.textContent = "Description";        descInput.classList.add("form-control");        descInput.name = "description";        descInput.value = todo?.description || "";        descInput.required = true;        descGroup.appendChild(descLabel);        descGroup.appendChild(descInput);        statusGroup.classList.add("mb-3");        statusLabel.classList.add("form-label");        statusLabel.textContent = "Status";        statusSelect.classList.add("form-select");        statusSelect.name = "status";        statuses.forEach(status => {            const option = document.createElement("option");            option.value = status;            option.textContent = status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());            if (todo?.status === status) option.selected = true;            statusSelect.appendChild(option);        });        statusGroup.appendChild(statusLabel);        statusGroup.appendChild(statusSelect);        assigneeGroup.classList.add("mb-3");        assigneeLabel.classList.add("form-label");        assigneeLabel.textContent = "Assign To";        assigneeSelect.classList.add("form-select");        assigneeSelect.name = "assignee_id";        assigneeGroup.appendChild(assigneeLabel);        assigneeGroup.appendChild(assigneeSelect);        const deadlineGroup = document.createElement("div");        const deadlineLabel = document.createElement("label");        const deadlineInput = document.createElement("input");        deadlineGroup.classList.add("mb-3");        deadlineLabel.classList.add("form-label");        deadlineLabel.textContent = "Deadline";        deadlineInput.type = "date";        deadlineInput.classList.add("form-control");        deadlineInput.name = "deadline";        deadlineInput.min = new Date().toISOString().split('T')[0];        deadlineInput.value = todo?.deadline || "";        deadlineGroup.appendChild(deadlineLabel);        deadlineGroup.appendChild(deadlineInput);        body.appendChild(titleGroup);        body.appendChild(descGroup);        body.appendChild(statusGroup);        body.appendChild(assigneeGroup);        body.appendChild(deadlineGroup);        const errorDiv = document.createElement("div");        errorDiv.classList.add("alert", "alert-danger", "d-none");        errorDiv.id = "formErrors";        body.insertBefore(errorDiv, body.firstChild);        const footer = document.createElement("div");        footer.classList.add("text-center");        const submitBtn = document.createElement("button");        submitBtn.type = "submit";        submitBtn.classList.add("btn", "btn-primary", "me-2");        submitBtn.textContent = isEdit ? "Update ToDo" : "Create ToDo";        const backBtn = document.createElement("button");        backBtn.type = "button";        backBtn.classList.add("btn", "btn-secondary");        backBtn.textContent = "Back to ToDo";        backBtn.addEventListener("click", () => modal.close());        footer.appendChild(submitBtn);        footer.appendChild(backBtn);        const additionalLinks = document.createElement("div");        additionalLinks.classList.add("text-center", "mt-4");        const showLink = document.createElement("a");        showLink.href = "#";        showLink.classList.add("btn", "btn-outline-info", "me-2");        showLink.textContent = "Show this ToDo";        showLink.addEventListener("click", (e) => {            e.preventDefault();            if (todo) {                modal.close();                modalShowMenu(todo.id);            }        });        const backToListLink = document.createElement("a");        backToListLink.href = "#";        backToListLink.classList.add("btn", "btn-outline-dark");        backToListLink.textContent = "Back to ToDos";        backToListLink.addEventListener("click", (e) => {            e.preventDefault();            modal.close();        });        additionalLinks.appendChild(showLink);        additionalLinks.appendChild(backToListLink);        form.appendChild(header);        form.appendChild(body);        form.appendChild(footer);        form.appendChild(additionalLinks);        form.addEventListener("submit", function (event) {            event.preventDefault();            const formData = {                title: titleInput.value,                description: descInput.value,                status: statusSelect.value,                assignee_id: assigneeSelect.value,                deadline: deadlineInput.value            };            const url = isEdit ? `/to_dos/${todo.id}.json` : "/to_dos.json";            const method = isEdit ? "PATCH" : "POST";            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;            fetch(url, {                method,                headers: {                    "Content-Type": "application/json",                    "X-CSRF-Token": csrfToken                },                body: JSON.stringify(formData)            })                .then((response) => response.json())                .then(data => {                    if (data.id) {                        modal.close();                        refreshToDos();                    }                })                .catch(error => {                    console.error("Error:", error);                });        });        overlay.appendChild(form);        modal.showModal();    }    function createElement(tag, text, classes = []) {        const element = document.createElement(tag);        element.textContent = text;        element.classList.add(...classes);        return element;    }    function createTextElement(tag, label, text, classes = []) {        const element = document.createElement(tag);        element.classList.add(...classes);        if (label) {            const labelElement = document.createElement("strong");            labelElement.textContent = label;            element.appendChild(labelElement);        }        element.appendChild(document.createTextNode(text));        return element;    }    function getButtonClass(status) {        switch (status) {            case 'to_do':                return 'primary';            case 'in_progress':                return 'warning';            case 'done':                return 'success';            default:                return 'secondary';        }    }    function deleteToDo(todoId) {        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');        fetch(`/to_dos/${todoId}.json`, {            method: "DELETE",            headers: {                'Content-Type': 'application/json',                'X-CSRF-Token': csrfToken            }        }).then(response => {            if (response.status !== 204) {                throw new Error(`HTTP error! status: ${response.status}`);            }            const showModal = document.querySelector('#todoModal');            const editModal = document.querySelector('#editTodoModal');            if (showModal) showModal.close();            if (editModal) editModal.close();            const todoElement = document.querySelector(`[data-id="${todoId}"]`);            if (todoElement) {                todoElement.remove();            }            fetch('/to_dos.json')                .then(response => response.json())                .then(todosData => {                    renderToDos(todosData);                });        }).catch(error => {            console.error('Error:', error);            alert('An error occurred while deleting the todo. Please try again later.');        });    }    function refreshToDos() {        fetch('/to_dos.json')            .then(response => {                if (!response.ok) {                    throw new Error(`HTTP error fetching todos: ${response.status}`);                }                return response.json();            })            .then(data => {                renderToDos(data);            })            .catch(error => {                console.error('Error refreshing todos:', error);            });    }    function editToDoForm(todo) {        createToDoForm(todo);    }});